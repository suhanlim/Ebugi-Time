// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// postgresql env("DATABASE_URL")

datasource db {
  // provider     = "mysql"
  // url          = env("DATABASE_URL")
  provider     = "sqlite"
  url          = "file:./db.sqlite?socket_timeout=4000"
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Category {
  id   String @id @default("open")
  name String
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String
  contents    String
  category    String
  is_deleted  Boolean
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById String
  comments    Comment[]
  scraps      Scrap[]
  likes       Int
  image_url   String

  @@index([createdById])
}

model Comment {
  id        Int      @id @default(autoincrement())
  contents  String
  user      User     @relation(fields: [user_id], references: [id])
  user_id   String
  post      Post     @relation(fields: [post_id], references: [id])
  post_id   Int
  createdAt DateTime @default(now())
  likes     Int

  @@index([post_id, user_id])
}

model Like {
  id          Int    @id @default(autoincrement())
  user        User   @relation(fields: [user_id], references: [id])
  user_id     String
  target_type String
  target_id   Int

  @@index([user_id])
}

model Scrap {
  id      Int    @id @default(autoincrement())
  user    User   @relation(fields: [user_id], references: [id])
  user_id String
  post    Post   @relation(fields: [post_id], references: [id])
  post_id Int

  @@index([user_id])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(uuid())
  userId            String  @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(uuid())
  password      String
  name          String
  introduction  String
  grade         String
  email         String    @unique
  emailVerified DateTime?
  nickname      String
  image_url     String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  scraps        Scrap[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//enum Target_type {
//  POST
//  COMMENT
//}
