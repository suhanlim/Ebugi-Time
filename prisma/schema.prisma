// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// postgresql env("DATABASE_URL")

datasource db {
  provider     = "sqlite"
  url          = "file:./db.sqlite"
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id          Int       @id @default(autoincrement())
  name        String
  likes       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById String
  comment     Comment[]

  @@index([name])
}

model Comment {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  post        Post     @relation(fields: [postId], references: [id])
  postId      Int
  successorId Int?     @unique
  successor   Comment? @relation("CommentHistory", fields: [successorId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  predecessor Comment? @relation("CommentHistory")
}

model Like {
  id Int @id @default(autoincrement())
}

// Necessary for Next auth
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  Comment       Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
